[build-system]
requires = ["setuptools>=74.0", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "vminfo-parser"
authors = [
    { name = "Steve Ovens", email = "steve.ovens@x86innovations.com" },
    { name = "Jason Ross", email = "jaross@redhat.com" },
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
"Homepage" = "https://github.com/csfreak/flask-journal"
"Bug Tracker" = "https://github.com/csfreak/flask-journal"

[tool.setuptools.packages.find]
include = ["vminfo_parser*"]

[tool.setuptools.dynamic.dependencies]
file = ["requirements.txt"]

[tool.setuptools.dynamic.optional-dependencies.test]
file = ["tests/requirements.txt"]

[tool.setuptools.dynamic.optional-dependencies.dev]
file = ["dev-requirements.txt"]

[tool.setuptools_scm]
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"

[tool.flake8]
max-line-length = 120
max-complexity = 10
exclude = [
    '.git',    # No need to traverse our git directory
    '.venv',   # No need to scan imported code
    '.vscode', # This is autogenerated and managed by vscode
    'legacy',  # This is old code
]
extend-ignore = ['E501', 'E203', 'E701']
extend-select = ['B950']

[tool.black]
line-length = 120
extend-exclude = 'legacy' # This is old code

[tool.isort]
profile = "black"
extend_skip = ["legacy"]                     # This is old code
target-version = ["py310", "py311", "py312"]

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
testpaths = "tests"
log_level = 'DEBUG'
addopts = "--capture=sys --cov --junitxml=.pytest.xml"
filterwarnings = []
markers = []

[tool.coverage.run]
branch = true
source = ["vminfo_parser"]

[tool.coverage.report]
show_missing = true
skip_empty = true
fail_under = 10
# exclude_also = [
#     "pass",
#     "def __str__",
#     "def __repr__",
#     "debug",
#     "logger.debug",
#     "if t.TYPE_CHECKING",
# ]

[tool.coverage.lcov]
output = 'coverage.lcov'

[tool.coverage.xml]
output = 'coverage.xml'
