[build-system]
requires = ["setuptools>=74.0", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "vminfo-parser"
version = "1.0.0"
authors = [
    { name = "Steve Ovens", email = "steve.ovens@x86innovations.com" },
    { name = "Jason Ross", email = "jaross@redhat.com" },
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
]
dynamic = ["dependencies", "optional-dependencies"]

[project.urls]
"Homepage" = "https://github.com/rhtools/vminfo-parser"
"Bug Tracker" = "https://github.com/rhtools/vminfo-parser/issues"

[project.scripts]
vminfo-parser = "vminfo_parser:main"

[tool.setuptools.packages.find]
include = ["vminfo_parser*"]

[tool.setuptools.dynamic.dependencies]
file = ["requirements.txt"]

[tool.setuptools.dynamic.optional-dependencies.test]
file = ["tests/requirements.txt"]

[tool.setuptools.dynamic.optional-dependencies.dev]
file = ["dev-requirements.txt"]

[tool.setuptools.dynamic.optional-dependencies.ci]
file = ["dev-requirements.txt", "tests/requirements.txt"]

[tool.flake8]
max-line-length = 120
max-complexity = 10
exclude = [
    '.git',    # No need to traverse our git directory
    '.venv',   # No need to scan imported code
    '.vscode', # This is autogenerated and managed by vscode
    'legacy',  # This is old code
]
extend-ignore = ['E501', 'E203', 'E701']
extend-select = ['B950']

[tool.black]
line-length = 120
extend-exclude = 'legacy'                    # This is old code
target-version = ["py310", "py311", "py312"]

[tool.isort]
profile = "black"
extend_skip = ["legacy"] # This is old code

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
testpaths = "tests"
log_level = 'DEBUG'
addopts = "--capture=sys --cov --junitxml=.pytest.xml --mpl"
filterwarnings = []
markers = []
mpl-baseline-path = "tests/images"
mpl-hash-library = "tests/images/hashes.json"
mpl-deterministic = true

[tool.coverage.run]
branch = true
source = ["vminfo_parser"]

[tool.coverage.report]
show_missing = true
skip_empty = true
fail_under = 60

[tool.coverage.lcov]
output = 'coverage.lcov'

[tool.coverage.xml]
output = 'coverage.xml'

[tool.semantic_release]
commit_parser = 'angular'
build_command = 'python -m build'
version_variables = ["vminfo_parser/_version.py:__version__"]
version_toml = ["pyproject.toml:project.version"]


[tool.semantic_release.commit_parser_options]
allowed_types = [
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_types = ["feat"]
patch_types = ["fix", "perf"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches.dev]
match = "(dev)"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.branches.other]
match = "(.*)"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.changelog]
exclude_commit_patterns = ['''(chore|doc|style|test)(?:\([^)]*?\))?: .+''']
template_dir = ".github/psr-templates"
mode = "update"
